<?php

namespace CDSRC\CdsrcTemplateBuilder\Controller;

/* **********************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2015 Matthias Toscanelli <m.toscanelli@code-source.ch>
 *
 *  All rights reserved
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 * ******************************************************************** */


use CDSRC\CdsrcTemplateBuilder\Domain\Model\Template;
use CDSRC\CdsrcTemplateBuilder\Exceptions\ExtensionInstallationException;
use CDSRC\CdsrcTemplateBuilder\Services\ExtensionCreatorService;
use CDSRC\CdsrcTemplateBuilder\Services\PageTreeCreatorService;
use TYPO3\CMS\Core\Authentication\BackendUserAuthentication;
use TYPO3\CMS\Core\Database\Query\QueryBuilder;
use TYPO3\CMS\Core\Database\Query\QueryHelper;
use TYPO3\CMS\Core\Page\PageRenderer;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser;
use TYPO3\CMS\Extensionmanager\Domain\Model\Extension;

class TemplateController extends ActionController
{
    protected $extensionDependencies = array(
        'realurl',
        'cdsrc_baseurl',
        'gridelements',
        'bootstrap_grids',
    );

    /**
     * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
     */
    protected $installUtility;

    /**
     * @var \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility
     */
    protected $extensionModelUtility;

    /**
     * @var \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
     */
    protected $managementService;

    /**
     * @var \CDSRC\CdsrcTemplateBuilder\Domain\Repository\ExtensionRepository
     */
    protected $extensionRepository;

    /**
     * @param \TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility
     */
    public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {
        $this->installUtility = $installUtility;
    }

    /**
     * @param \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility $extensionModelUtility
     */
    public function injectExtensionModelUtility(\TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility $extensionModelUtility) {
        $this->extensionModelUtility = $extensionModelUtility;
    }

    /**
     * @param \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService
     */
    public function injectManagementService(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService) {
        $this->managementService = $managementService;
    }

    /**
     * @param \CDSRC\CdsrcTemplateBuilder\Domain\Repository\ExtensionRepository $extensionRepository
     */
    public function injectExtensionRepository(\CDSRC\CdsrcTemplateBuilder\Domain\Repository\ExtensionRepository $extensionRepository) {
        $this->extensionRepository = $extensionRepository;
    }

    public function initializeAction()
    {
        parent::initializeAction(); // TODO: Change the autogenerated stub
        /** @var PageRenderer $pageRenderer */
        $pageRenderer = $this->objectManager->get(PageRenderer::class);
//        ini_set('error_reporting', E_ALL);
//        $pageRenderer->addRequireJsConfiguration() (PathUtility::getRelativePath(PATH_typo3, GeneralUtility::getFileAbsFileName('EXT:cdsrc_template_builder/Resources/Public/Libraries/BootstrapToggle/js/bootstrap2-toggle.min.js')));
    }

    /**
     * Return default module view
     *
     * @return string
     */
    public function indexAction()
    {

    }

    /**
     * Return template creation form
     *
     * @return string
     */
    public function newAction()
    {
        /** @var BackendUserAuthentication $beUser */
        $beUser = $GLOBALS['BE_USER'];
        $template = new Template();
        $template->setAuthorName($beUser->user['realName']);
        $template->setAuthorEmail($beUser->user['email']);
        $this->view->assign('template', $template);

        $dependencies = $this->extensionRepository->findByCurrentVersionByExtensionKey($this->extensionDependencies);

        $this->view->assign('dependencies', $dependencies);
    }

    /**
     * Return a preview of current template before creation
     *
     * @return string
     */
    public function previewAction()
    {

    }

    /**
     * Create the template and return to index
     *
     * @param Template $template
     * @param array $dependencies
     *
     * @throws \TYPO3\CMS\Extbase\Mvc\Exception\UnsupportedRequestTypeException
     */
    public function createAction(Template $template, array $dependencies)
    {
        try{
            $extensions = array();
            foreach($dependencies as $extensionKey => $options){
                if($options['enable']) {
                    $extensions[] = $extensionKey;
                    if ($extensionKey === 'realurl' && $options['useExtendedConfigurationFile']) {
                        $template->setUseExtendedRealUrlConfigurationFile(true);
                    }
                }
            }
            if($extensions) {
                /** @var Extension $extension */
                foreach($this->extensionRepository->findByCurrentVersionByExtensionKey($extensions) as $extension){
                    $template->addDependency($extension);
                }
            }
            // Create extension
            $extensionCreator = new ExtensionCreatorService($template);
            $extensionCreator->execute();

            // TODO: Set option for installation
            $extension = $this->extensionModelUtility->mapExtensionArrayToModel(
                $this->installUtility->enrichExtensionWithDetails($template->getKey())
            );

            // TODO: Set option for page tree creation
            $pageTreeCreator = new PageTreeCreatorService($template);
            $pageTreeCreator->execute();

            // Install the extension
            $this->managementService->setAutomaticInstallationEnabled(TRUE);
            if($this->managementService->installExtension($extension) === FALSE){
                if($this->managementService->getDependencyErrors()){
                    throw new ExtensionInstallationException ('Unable to install extension, dependencies installation failed. Please try to install the extension manually.', 1445522492);
                }else{
                    throw new ExtensionInstallationException ('Unable to install extension, something went wrong.', 1445522492);
                }
            }

            $this->redirect('index');
        }catch(\Exception $e){
            $this->view->assign('template', $template);
            $this->view->assign('error', $e->getMessage());
            $dependencies = $this->extensionRepository->findByCurrentVersionByExtensionKey($this->extensionDependencies);
            $this->view->assign('dependencies', $dependencies);
        }
    }
}